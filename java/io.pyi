from typing import Protocol, Self

from java.lang import Object

class File(Protocol):
    def __init__(self, *args: str | type[Self]) -> None: ...

class FileDescriptor(Protocol): ...
class FileChannel(Protocol): ...
class Provider(Protocol): ...

class FileInputStream(Protocol, Object):
    @classmethod
    def nullInputStream(cls) -> FileInputStream: ...  # noqa: N802
    def available(self) -> int: ...
    def close(self) -> None: ...
    def getChannel(self) -> FileChannel: ...  # noqa: N802
    def getFD(self) -> FileDescriptor: ...  # noqa: N802
    def mark(self, readlimit: int) -> None: ...
    def markSupported(self) -> bool: ...  # noqa: N802
    def read(self, *args, **kwargs) -> int: ...  # noqa: ANN003, N802, ANN002
    def readAllBytes(self) -> bytes: ...  # noqa: N802
    def readNBytes(self, Len: int) -> bytes: ...  # noqa: N802, N803
    def reset(self) -> None: ...
    def skip(self, n: int) -> int: ...
    def skipNBytes(self, n: int) -> None: ...  # noqa: N802
