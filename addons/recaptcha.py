"""
Realiza operações de pré-processamento de imagem e OCR para resolver captchas.

Este módulo contém funções para processar imagens de captchas utilizando OpenCV e extrair texto via Tesseract OCR.

Args:
    Nenhum argumento de módulo.

Returns:
    Nenhum valor de retorno.

Raises:
    Nenhuma exceção específica.

"""

import base64
import io
import re
from typing import Any

import cv2
import numpy as np
import pytesseract
from dotenv import dotenv_values

environ = dotenv_values()

# Configura o caminho do executável do Tesseract a partir das variáveis de ambiente
pytesseract.pytesseract.tesseract_cmd = environ["PATH_TESSERACT"]
custom_config = environ["CONFIG_TESSERACT"]


def load_img_blur_apply(im_b: bytes) -> np.ndarray:
    """
    Realiza o pré-processamento de uma imagem de captcha aplicando conversão para escala de cinza, binarização e suavização.

    Args:
        im_b (bytes): Imagem em bytes a ser processada.

    Returns:
        np.ndarray: Imagem processada em escala de cinza e binarizada.

    Raises:
        Nenhuma exceção específica.

    """
    # Converte os bytes em um array numpy
    image_np = np.frombuffer(im_b, np.uint8)
    img_np = cv2.imdecode(image_np, cv2.IMREAD_COLOR)

    # Converter para escala de cinza
    color = cv2.COLOR_RGB2GRAY
    gray = cv2.cvtColor(img_np, color)

    # Aplicar binarização com Otsu
    _, thresh = cv2.threshold(gray, 5, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)

    # Suavizar ruído com mediana (sem borrar letras)
    return thresh


def reabre_imagem(f: Any) -> np.ndarray:
    """
    Reabra e processe uma imagem a partir de um arquivo, aplicando conversão para escala de cinza e binarização.

    Args:
        f (Any): Arquivo de imagem aberto em modo binário.

    Returns:
        np.ndarray: Imagem processada em escala de cinza e binarizada.

    Raises:
        Nenhuma exceção específica.

    """
    # Lê o conteúdo do arquivo e converte em array numpy
    image_np2 = np.frombuffer(f.read(), np.uint8)
    img_np2 = cv2.imdecode(image_np2, cv2.IMREAD_COLOR)
    color2 = cv2.COLOR_RGB2GRAY
    gray2 = cv2.cvtColor(img_np2, color2)
    _, threshold = cv2.threshold(gray2, 2, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
    return threshold


def image_to_text(im_b: bytes) -> str:
    """
    Processa uma imagem de captcha e extraia o texto utilizando OCR.

    Args:
        im_b (bytes): Imagem em bytes a ser processada.

    Returns:
        str: Texto extraído da imagem após o processamento.

    Raises:
        KeyError: Se as variáveis de ambiente necessárias não estiverem definidas.
        cv2.error: Se ocorrer erro ao processar a imagem.

    """
    # Define nome do arquivo para debug do processamento
    process_dbg = "process_dbg.png"

    # Pré-processa a imagem
    thresh = load_img_blur_apply(im_b=im_b)
    thresh = cv2.bitwise_not(thresh)

    # Define kernels para operações morfológicas
    kernel2_dilate = cv2.getStructuringElement(cv2.MORPH_DILATE, (1, 1))
    kernel_circle = cv2.getStructuringElement(cv2.MORPH_CROSS, (2, 1))
    kernel_ellipse = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (1, 2))
    kernel_open = cv2.getStructuringElement(cv2.MORPH_CLOSE, (2, 1))

    # Aplica operações morfológicas para melhorar a imagem
    i = 1
    for item in [kernel_circle, kernel_ellipse, kernel_open, kernel2_dilate]:
        thresh = cv2.medianBlur(thresh, i)
        thresh = cv2.erode(thresh, item, iterations=1)

    cv2.imwrite(process_dbg, thresh)

    # Sequência de dilatações e erosões para refinar caracteres
    kernel1 = cv2.getStructuringElement(cv2.MORPH_RECT, (2, 2))
    thresh = cv2.dilate(thresh, kernel1, iterations=1)
    cv2.imwrite(process_dbg, thresh)

    kernel2 = cv2.getStructuringElement(cv2.MORPH_CROSS, (2, 1))
    thresh = cv2.erode(thresh, kernel2, iterations=1)
    cv2.imwrite(process_dbg, thresh)

    kernel2 = cv2.getStructuringElement(cv2.MORPH_DILATE, (2, 1))
    thresh = cv2.erode(thresh, kernel2, iterations=1)
    cv2.imwrite(process_dbg, thresh)

    kernel2 = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (1, 1))
    thresh = cv2.erode(thresh, kernel2, iterations=1)
    cv2.imwrite(process_dbg, thresh)

    kernel2 = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (2, 1))
    thresh = cv2.erode(thresh, kernel2, iterations=1)
    cv2.imwrite(process_dbg, thresh)

    # Aplica OCR usando pytesseract
    text_pytesseract = str(pytesseract.image_to_string(thresh))
    text = re.sub(
        r"[^a-z0-9]",
        "",
        text_pytesseract.lower().replace("\n", "").strip().replace(" ", ""),
    )

    return text


img1 = "data:image/png;base64, /9j/4AAQSkZJRgABAgAAAQABAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/wAARCABaASwDASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD3+iiigAooooAKKKKACiiigAooqnd6jHbSiBIZ7m5K7hDAuTj1JJCqODjcRnaQMkYoAuVQv/313Y2vUNKZpF/2EGQc+0hj/wD1ZqPbrdz8rtZWK9CYi1w7A/3SwQKR2yHHPTjBoxaS1xrNwLrU9Quo4YY1U+aItrksWG6IIegQkZ5ypIOFwAdDRWZ/Yvlf8emp6jbZ+9+/8/d6f64Pjv0xnPOcDB5Ws2vEVxbX6dAtyPJk+pdAVPpgIOMc8cgGnRVC31aCadbaZJLS7bO2C4AVmwMnaQSr4HJ2k4zzg1foAKKKKACiiigChb/6Nqs9t0jnX7RGP9rOJAPQcofcux55xfqhf/JeadL90Cco79MKyMACfQts47nb3xVFtVudaVotBKi3ZXQ6o67kjdTjEaHHmnr83CcdWwVoA3aKxW8M21wk6399qd752Q/mXjxqVwBt2RFExx6c5Oal/wCEZ0Icpo9jE4+7JFAsbqfVWUAqR2IIIoA1abJIkMTyyuqRoCzMxwFA6knsKzP7FaD5rDUr6B+pEszXCOR03CUsQPXYVJz16EYmtaleT2dtoWo20ltdXs0MEtzBJtgdWJL+XI3fCkbGwfm43DkgFjw5ZtqWoT+J7xPnuflso3UhoIRkA4JIBYc8epIPzEV1FFFAGZpvzanrDtyy3KRhj1CiGNgv0yzHHqx9TWnWYn+h69Kp+WG+QOnoZkGGyT3KBMAdo3OBgk6dABRRRQAVmaV8t5q8Y4RLwbVHRcwxscDtlmYn3JPetGSRIYnlldUjRSzOxwFA6knsKo6PG4s3uZkZJruVrh1cYYA8IrDswQIpHqp69SAZXiizuLWWHxFp+77VZD9+nmbRNbjLMvIIz3/PqQK6G3uIrq2iuIW3RSoHRsEZUjIPPtUlYugPFbz6npCGMfYrksiJGVCxyjzFHpwWZeOyjgUAbVFFFABRRRQAUUUUAFFFV7y9t7CFZbmTYrOEUBSzMx6AAZJPsKALFVbnUrCzkEd1e20DkbgssqqSPXBPtWf9luddjjkvhLaWTBv9DDlXkB4BkYEEcE/IPxJ6Ca4hsNEtZby0062SfAjjWKNYzI7EBU3AcZYqMngdT0oAo3HimzuY9ljNOIyhklu1tJGWGPJG4fLgklWAJ+UbWJzja13Sr7SGRIrPUYJ5p/3jEyqZZWxyzDg5wOmBgAAAAAC3YWf2K1WN5PNnb5p5iMGWTABYjt04HQAADgCnXVhZ3uz7XaQT7M7fNjDbc9cZ+goAsVQsvk1HUo24dpUmA9UMaqD+aOPw+lVDp91pEiyaUGltDITLYEqAobGTETjbg5O0nacnGKSw1O1vNX82CTmeARvG/wArwvGzHYw7Mdz8f9MyRkdADbooooAiuLeK7gaGZNyNjuQQQcggjkEEAgjkEAiqcM09jcw2l3M1wk7FYLhgoYsFLFHCgDOFYhgAMAg4IBbRqK4t4ruBoZk3I2O5BBByCCOQQQCCOQQCKAJaKoabcSv59pdPuubZ9rMQB5iHlHxx1HBIAG5XA4FX6ACiiigDm9dnfUdRttHii324mia6ZlVo5Od3kHPfYDIfZVHO8V0lct4dh8yz0mQiLzrjzNWuHiTaN8oOFIyT0kIBJ5EX5dTQAUUUUAFc/rej2Wta7ptvfxebAltcv5Z6MT5a89/4iQRgggHPFdBWTd3EUPinS0kbDTW1ykYweWzE2PyUn8KAJNJuLkK9hqMqy6hbKDJKibVlRiwSQDPBO0gjsynAxgnSrK1f9zeaTd/dSO68uWQddkiMgX1IMhi49QCemRq0AQXVql3EFYsjq2+ORDho27Mp9eSPQgkEEEiq0epCCVLXUSsFwzBEkwVimJ6bGPG4/wBwncMHqMMdCmyRpNE8UqK8bqVZGGQwPUEdxQA6ori5gtIGnuZo4YVxukkYKoycDJPvVH+wNPXiJbi3TtFbXUsMa/REYKPXgdealt9HsLadbhYPMuEztnndpZFGMYDuSwHJ4BxyfU0ARYbWOHjkj0/ukqFHuD6MpAIT1BGW/wB37+nRRQAVipd7PG89nsz5umxy789NkjjGPff+lbVYqwzyeN3m8z/R4NNVNhY8M8jHIHTpHz9BQBtUUUUAFZXiDXbfw9pT3twrOd2yONeruQSBnsOCc+3c8Vq1x/jzS7i7XS9Rt7Nr4WNxuktFTcZEJUn14+UDGD97PQUAVo/EHjeRTeL4chFmGLeUxKzbAemC2d2B/d56gV0HhvxJa+JLFri3RopI2CyxOwJU4ByMdV6gE4zg8Vn/APCw/Df2Xzftkm/Zu8nyX35xnb0257dce9ReC9PvIbzW9UubeS2i1C5MkMUw2yBQznLL2+9+h7YJAOskkSKNpJHVEQFmZjgADqSaybBP7Uvl1l2zbqjJZRtFtKqcbpDnnLY46fLj1NO8QMGsoLMpK4vLmKAiPI+UtufJByBsVs1rUAFZlz/pXiCzgHK2aNdORwQ7Axxj3BBm6d1HTvp1mWP77XdVuOnl+TabfXapk3fj52Mf7Oc84ABp0Vw03i3Wdb1W507wzZQtHCxSS9lbcoBOA4wcAZyR97IGccEUybXvE3hPy38QR2+oWUrhftFuwV0Y9sYGcBWOMDr97tQB3lYWvWz289vrluGZ7M5uI9/DwgMCQM4LKGYjkdT14FbcciTRJLE6vG6hldTkMD0IPcU6gBsciSxrJG6ujgMrKcgg9CDTq5rSCdIvdVt2nV7KK5yI1AH2VXUODjsh3EZ6DbnGCxXQ19vO8MX01vdSRkW7TRzW8mD8o3DDDscfkaANWiuf8MayLrwfBf3k6loI2E7gliNmeW6ndtAJ9c+9cx4X8W65qPie2t72RTa3YkZU8kKAAGIKnqQCpHJPfvQB2kv+i+I4JT9y9gNuxPP7yPLoB6ZVpiSePlHTvp1yvirV2s9Y0GztzD9pku9waT5hGGBiBKggnPmNjkfdrqqACsrxP/yKes/9eM//AKAa1azmdNWZEhdZLEHMsgOVm4PyD1GcEnpxt5ywAAaRFGYmu441jjmVVgRBgJAuRGAB2OS3QEb8dqi1XxBaaPf6bZ3EczSahL5URjUEKcqPmyRx8w6ZpfDfy+HbK3P37VPsjnsXiJjYj2JQ49sdK4Xx5b60fF2kFLuERy3AGnAgZhf92CW+XkbsH+L+lAHp9Fc9oP8AwlUN79l1z7FcWwhLC7g4ZpNwwpHHbPRcdOc5roaACsfxABbxWmq7V3WE4kdvKLkRN8knTkAK27v9wcVsU2SNJonilRXjcFWVhkMD1BHcUAZXid2j0GV442knWWE26Lj5pvNTywckfKX255HGa164mCS4Go2XhW4eb/RLxJkdIv8AWWkal4yzYxxIsasQBnoCTmuu1BLqTTbpLGRIrxoXEEjj5VkwdpPB4Bx2NAHJeLvE2sW3iLT/AA34fit/t17CztLcL8sYOQGU56ja5OQegwD0rT8LWfim0+1/8JLqVre7tn2fyFA2Y3bs4Revy+vSvM0sPGeo/EeS3OrWR1zTbbIuWQCMRkDgAR8n98eq+voK9a8P22rWukRprd6l5qBZjJJGqhAM8BcKvGMdRnJPbFAGpRRRQAUUUUAZ+t6qmiaNc6jJE0qwqMIpwWJIAGewyRz/ADrjvDo8V6zfLr63Vrb2d1JGssPJ3xRnBCAhto+/3HJJ9DUHxN1G+t5YbGO7jFlcwgyW4CltyvnceMgHjHPO01r+GNH8VabJZR3l7ZrpkaENaxqu4ZU4GQnJ3EEndzzyaAOxooooAK4bxabjWPFmm+GGuWgsLiLz5vLHzPjecH2+Tj3OTnAruaxPEnhuLxDBbkXMlrd2z74LiPJKHIzxkeg7ggge4IBJ/wAItoP2X7P/AGRZ7NmzPlDfjGPvfez75z71heGpH0vxnqnhu3djpsMXnwpIdxiJ2Eqp/u/OeD6euSYo9I+IEUSRrr1iVRQoLDcePUmPJPua1/C/hVNAWW5nna51G5UefM3IzkkhSRnBJGSTzgHjpQBevUkm8QaWgl2xRJNcMm3O8gKg57Y8w1qVj6u0dvqujXbzSR/6Q1thT8rCRDgEDr8yp7f02KACsKX7VDe6/BYc3MltHdRE4z5zK8YHPGP3Kde5OeOm7WZef6PrunXC/wDLzvtHUcZ+UyKx9dvluAP+mhORyCAeceEW8U3Gji10GO1trYXDGW8fBJfaOGDFuMbR8q9h71tah4c8c6pYyWd5rGny28mN6bducEEciMHqBV278H6jp+oT33hXUY7A3GBLbSLmPucjg456DHGTggcVDJ4a8YarE9rqviKGO2ZTn7NHyx6bThUypBPc/T0AOu0q1ex0extJSpkgt44mKnglVAOPbirdQWVqljY29pEWMcESxKWPJCjAz78VPQBixTJF4zubZYVBuLGOZnHGSjsvPrww5/2auvaTwyNLZTKm4lmgkGY2J5JBHKk+vI5J2knNQWPnSa7qsz+X5SeTbxhc7vlUuSf+/v6fnqUAeOLqzaN4Z1jw83F0bzYZI3IBXo+OOn7sDtkP7Vr619g0qy8LyQXdrOmmzAzx28wkYsSrsyj0yrdcdR+G1N4GDeMItYiuFW2M/wBoki5DK4wRgnOQX5PTAPFbHinRG17Q5LOLyxOHV4mkYhVYHknH+yWHTvQBxl1dW+qfEfz7y4iitbS5SBPNcIyGMM+R2I3xkEnPDjocY77+1YZf+POGe8/2oFGwj1DsQh9MAk+3BxzXhDw9JpF9JBO8Uslspd2jGV8yTAC5OPmREJ9cTnoDlu0oAoeTc33F2qRWx626nczj0dumPVRkcfeIJBv0UUAYV6y6FqraoWVNPvGVL55ZiBC4AWOQDoAeEb/gB6BjWH4i/wBP+Jfh3TpflhgRrpWThi/zNg+2Yl/M/h20sUc8TxSxrJG6lXRxkMDwQR3FcP4g8EXgvotX8O3ssV5B/q7eST5EUDhIs/dGcjYfl+YjgcUAd3RXG+HPEd/D9pg8TzRwJHt8i9mt3tkmJyWGZFUZHAAwDwTzgmuik13SIreG4k1WxSGbd5UjXCBZMHB2nODg9cUAaFRXVzDZ2k11cPshhRpJGwThQMk4HPQVmx+JLK6UnT4ry+O4qhgt22OQSDtlYCMgYPO7Bxxk4FEWjyXV0l5rEq3MkUomtrdBiK2O3HH/AD0Yc/O31ULQBQbSb7VrZNVkm8jUlmFxZK6Mggjx8sMgzn5gfnxg5OOQqir2l+IrXUbiSymRrPUojtktJyAxOM5Q/wAa9eR25wARWxWbrGiWmtwRpceZHJC4eGeFtskTZ6qe3T+XcA0Acdo//Jctf/68F/8AQYK9Drz/AEzw5rPhvxje67dNJq8E1n5O+AATZUR43IxGeEI4LE455NdUnibRmnlhkv47eWLG9LoGBhkZHDgZ4/p60Aa1FUBrukGJpRqtiY1IVm+0JgE5wM56nB/I1E3iPRwyJHqENxI52rHbHz3PBP3UycYB5xQBqVl6prlvpssdqqtc6jOM29pH96T6noq9ck9geuKpNfa3rKpHp9nNpUDjc15eIpkXBPyiLJ5PHLY4zx0q3o/hzT9FeSW3WSS6lz5tzO++R8nPJ+voBnAzmgDifHWjfY9AXULwxzapdXiGeZFwqgRsAieigAe5xk9semVzvjLQbrxFo8VpaSQpIlwJSZSQMBWHYHnkV0VABRRRQAUVn/Yn1D59RXMJ+7ZMFZB6F/7ze2do4wCVDGl/ZOnz6j5VnZQWy2r4nmgjETlimQisuGHDKxII7LzlsAF6TWbKOV41aaZkJVzb28kwVh1UlFIDD0PNOg1axuJlgWfy52zthmRopGGM5COAxHB5AxwfQ1HbFtNeCxlfzIX+S3k2qpBCk7GCgAcKSCABgYOCAWuzwRXMLQzLuRsdyCCDkEEcgg4II5BGRQBX1S1mu7Bo7d40nV0kjMgJXcjhgDjnBK4/GjTNQj1OxS4QbX+7LEfvRSD7yHIByD7e9MtJZoLtrG6maZyDJBKwGZEG0Nu2gAMGb0AwV6nditfQz6fqP9qWkEkySJsvIIkUs4UMVdckEsD8uOcg9OBQBsVV1Gz+32MluJPLc4aOTGfLkUhkbHfDAHHQ4wadZ31rqFuLiznjmiP8SHODjOD6HkcHmrFAFWzvPtO+KWPybqLHmwk5xnowP8SnBwfYggEEC1VO7tJGlF3aFUu0Xb8xwsq9dj47cnDdVJJ5BZWLTUI55TazbYb5F3Pbl8nHTcv95DnhsexwQQAC5Ve9vI7CzkuZVkZUwAsa7mYkgBQO5JIH4066uoLG1kubmVYoYxlnbt/n0rLhil1jUkvbm3aKytSfs0UysHkkz/rWU9MYIUEZ5J44oAsaJYvY6eTOqrdXMjXFwF6CRzkgcnpwOvbNaVFFABUF3dx2cQdwzu7bI4kGWkbsqj14J54ABJIAJou7uOziDuGd3bZHEgy0jdlUevBPPAAJJABNV7e1nlnW71AR+cmfKhiYskPGCwJALMRnnAwDgDliwA/TLSS0swJyrXUrGW4dTkNI3XBPO0cKueQqqO1XKKKACiiigAooooAKrpY2cd7JepaQLdyLtecRgOw44LdSOB+QqxRQAUUUUAFFFFABRRRQBm/8I9ov/QH0/wD8Bk/wrQjjSGJIokVI0AVVUYCgdAB2FOooAKKKKACiiigAooooAKztF+a0nkPLveXG5j1bErKMn2VVA9gB2rRrO0z5bvVoxwiXnyqOi5ijY4HuzMT7knvQAuvceH9QcfeS3eRD3VlUlSPQggEHsRWhWfrXOnKh+69xBG47MrSoGB9QQSCO4NaFAGdqX/H/AKP/ANfjf+iJa0azpv8AkZLH/rzuP/Q4a0aAM270kSXX22zma0vSV3SLkpKBkbXTIDcEjPUcYPFQrda9bwxfaNNtLpy+JDa3JUgeoVwBwO27k/psUUAY/wDbsv2z7L/Ymq+Z6+Wmzpn7+/b+vt1qC8TVdWtJI20eyhKSZha7uSzKR0cCMHa2CcEMCD39d+igDnh4fvI54Lpr6K+ngBCJeREogByBGQ2UPABdvMbgH1BvfbNXh+afSI5F6AWd2HfPuJFjGPxz047jTooAzPt2qzf8e+j+Vj73225WPP8Au+X5mffOO2M84Ps2r3XM99HZL1EdmgdwfeSQEMD1+4D054506KAKdppltaSmcBpbpl2vczNvkYdSM/wrnnauFB6AVcoooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigD//Z"
img2 = "data:image/png;base64, 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"
img3 = "data:image/png;base64, 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"

for pos, img in enumerate([img1, img2, img3]):
    bytes_img = base64.b64decode(img.replace("data:image/png;base64, ", ""))
    with open(f"img{pos}.png", "wb") as f:
        f.write(bytes_img)

    readable_buffer = io.BytesIO(bytes_img)

    print(image_to_text(readable_buffer.read()))
