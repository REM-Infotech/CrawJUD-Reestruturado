{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CrawJUD-Reestruturado CrawJUD \u00e9 uma plataforma de automa\u00e7\u00e3o para rotinas jur\u00eddicas, integrando rob\u00f4s, APIs, tarefas ass\u00edncronas e comunica\u00e7\u00e3o em tempo real. O projeto \u00e9 modularizado para facilitar manuten\u00e7\u00e3o, escalabilidade e integra\u00e7\u00e3o com diferentes sistemas judiciais. Estrutura Geral api/ : Backend principal da API, respons\u00e1vel por autentica\u00e7\u00e3o, rotas, modelos e integra\u00e7\u00e3o com banco de dados. celery_app/ : Gerenciador de tarefas ass\u00edncronas (Celery), incluindo workers, agendamento e integra\u00e7\u00e3o com servi\u00e7os externos. crawjud/ : N\u00facleo dos rob\u00f4s de automa\u00e7\u00e3o, com bots para diferentes sistemas judiciais, utilit\u00e1rios e tratamento de exce\u00e7\u00f5es. socketio_server/ : Servidor de comunica\u00e7\u00e3o em tempo real via Socket.IO, para logs, notifica\u00e7\u00f5es e integra\u00e7\u00e3o com clientes. tests/ : Testes automatizados do projeto. requirements.txt / poetry.lock / pyproject.toml : Gerenciamento de depend\u00eancias Python. Como executar Instale as depend\u00eancias: powershell poetry install Configure as vari\u00e1veis de ambiente conforme ENVIRONMENT-VARIABLES.md nas pastas crawjud/ e resources/ . Inicie os servi\u00e7os conforme a necessidade: API: python -m api Celery: python -m celery_app Rob\u00f4s: python -m crawjud --bot_system <sistema> --bot_name <bot> --path_config <config> SocketIO: python -m socketio_server Consulte os readme.md de cada pasta para detalhes espec\u00edficos.","title":"CrawJUD-Reestruturado"},{"location":"#crawjud-reestruturado","text":"CrawJUD \u00e9 uma plataforma de automa\u00e7\u00e3o para rotinas jur\u00eddicas, integrando rob\u00f4s, APIs, tarefas ass\u00edncronas e comunica\u00e7\u00e3o em tempo real. O projeto \u00e9 modularizado para facilitar manuten\u00e7\u00e3o, escalabilidade e integra\u00e7\u00e3o com diferentes sistemas judiciais.","title":"CrawJUD-Reestruturado"},{"location":"#estrutura-geral","text":"api/ : Backend principal da API, respons\u00e1vel por autentica\u00e7\u00e3o, rotas, modelos e integra\u00e7\u00e3o com banco de dados. celery_app/ : Gerenciador de tarefas ass\u00edncronas (Celery), incluindo workers, agendamento e integra\u00e7\u00e3o com servi\u00e7os externos. crawjud/ : N\u00facleo dos rob\u00f4s de automa\u00e7\u00e3o, com bots para diferentes sistemas judiciais, utilit\u00e1rios e tratamento de exce\u00e7\u00f5es. socketio_server/ : Servidor de comunica\u00e7\u00e3o em tempo real via Socket.IO, para logs, notifica\u00e7\u00f5es e integra\u00e7\u00e3o com clientes. tests/ : Testes automatizados do projeto. requirements.txt / poetry.lock / pyproject.toml : Gerenciamento de depend\u00eancias Python.","title":"Estrutura Geral"},{"location":"#como-executar","text":"Instale as depend\u00eancias: powershell poetry install Configure as vari\u00e1veis de ambiente conforme ENVIRONMENT-VARIABLES.md nas pastas crawjud/ e resources/ . Inicie os servi\u00e7os conforme a necessidade: API: python -m api Celery: python -m celery_app Rob\u00f4s: python -m crawjud --bot_system <sistema> --bot_name <bot> --path_config <config> SocketIO: python -m socketio_server Consulte os readme.md de cada pasta para detalhes espec\u00edficos.","title":"Como executar"},{"location":"api/","text":"API Backend principal da aplica\u00e7\u00e3o, respons\u00e1vel por expor endpoints RESTful, autentica\u00e7\u00e3o, controle de usu\u00e1rios, dashboards e integra\u00e7\u00e3o com banco de dados. Estrutura dos Itens main .py : Ponto de entrada da API (inicializa o servidor). init .py : Inicializa\u00e7\u00e3o do app Quart, configura\u00e7\u00e3o de extens\u00f5es e banco de dados. quartconf.py : Configura\u00e7\u00f5es da aplica\u00e7\u00e3o (vari\u00e1veis de ambiente, banco, JWT, etc). middleware.py : Middlewares para tratamento de requisi\u00e7\u00f5es e respostas. addons/ : Utilit\u00e1rios auxiliares (ex: logger, gera\u00e7\u00e3o de modelos, cores). models/ : Modelos de dados (ORM) e entidades do sistema. routes/ : Rotas da API, separadas por dom\u00ednio (auth, dashboard, bot, etc). Subpastas addons/logger/ : Configura\u00e7\u00e3o e utilit\u00e1rios de logging. addons/make_models/ : Scripts para gera\u00e7\u00e3o autom\u00e1tica de modelos. models/ : Modelos de dados como bots, usu\u00e1rios, agendamentos, etc. routes/bot/ : Rotas relacionadas \u00e0 execu\u00e7\u00e3o e controle de bots. routes/config/ : Rotas para configura\u00e7\u00e3o do sistema. routes/execution/ : Rotas para execu\u00e7\u00e3o de tarefas espec\u00edficas. Consulte os arquivos de cada subpasta para detalhes de implementa\u00e7\u00e3o.","title":"API"},{"location":"api/#api","text":"Backend principal da aplica\u00e7\u00e3o, respons\u00e1vel por expor endpoints RESTful, autentica\u00e7\u00e3o, controle de usu\u00e1rios, dashboards e integra\u00e7\u00e3o com banco de dados.","title":"API"},{"location":"api/#estrutura-dos-itens","text":"main .py : Ponto de entrada da API (inicializa o servidor). init .py : Inicializa\u00e7\u00e3o do app Quart, configura\u00e7\u00e3o de extens\u00f5es e banco de dados. quartconf.py : Configura\u00e7\u00f5es da aplica\u00e7\u00e3o (vari\u00e1veis de ambiente, banco, JWT, etc). middleware.py : Middlewares para tratamento de requisi\u00e7\u00f5es e respostas. addons/ : Utilit\u00e1rios auxiliares (ex: logger, gera\u00e7\u00e3o de modelos, cores). models/ : Modelos de dados (ORM) e entidades do sistema. routes/ : Rotas da API, separadas por dom\u00ednio (auth, dashboard, bot, etc).","title":"Estrutura dos Itens"},{"location":"api/#subpastas","text":"addons/logger/ : Configura\u00e7\u00e3o e utilit\u00e1rios de logging. addons/make_models/ : Scripts para gera\u00e7\u00e3o autom\u00e1tica de modelos. models/ : Modelos de dados como bots, usu\u00e1rios, agendamentos, etc. routes/bot/ : Rotas relacionadas \u00e0 execu\u00e7\u00e3o e controle de bots. routes/config/ : Rotas para configura\u00e7\u00e3o do sistema. routes/execution/ : Rotas para execu\u00e7\u00e3o de tarefas espec\u00edficas. Consulte os arquivos de cada subpasta para detalhes de implementa\u00e7\u00e3o.","title":"Subpastas"},{"location":"celery_app/","text":"Celery App Gerenciador de tarefas ass\u00edncronas do projeto, utilizando Celery para execu\u00e7\u00e3o de jobs, agendamento e integra\u00e7\u00e3o com servi\u00e7os externos (ex: envio de e-mails, upload de arquivos, etc). Estrutura dos Itens main .py : Ponto de entrada para execu\u00e7\u00e3o do Celery. main.py : Inicializa\u00e7\u00e3o dos workers e beat (agendador). init .py : Configura\u00e7\u00e3o principal do Celery e logging. addons/ : Utilit\u00e1rios para Celery (logger, mail, scheduler, storage). exceptions/ : Exce\u00e7\u00f5es espec\u00edficas do contexto Celery. resources/ : Recursos e utilit\u00e1rios de configura\u00e7\u00e3o. tasks/ : Tarefas Celery (bot, email, arquivos). types/ : Tipos e contratos utilizados nas tasks. Subpastas addons/logger/ : Configura\u00e7\u00e3o e handlers de logging para Celery. addons/mail.py : Utilit\u00e1rio para envio de e-mails. addons/scheduler/ : Agendamento de tarefas. addons/storage/ : Integra\u00e7\u00e3o com armazenamento externo (ex: Google Cloud). Consulte os arquivos de cada subpasta para detalhes de implementa\u00e7\u00e3o.","title":"Celery App"},{"location":"celery_app/#celery-app","text":"Gerenciador de tarefas ass\u00edncronas do projeto, utilizando Celery para execu\u00e7\u00e3o de jobs, agendamento e integra\u00e7\u00e3o com servi\u00e7os externos (ex: envio de e-mails, upload de arquivos, etc).","title":"Celery App"},{"location":"celery_app/#estrutura-dos-itens","text":"main .py : Ponto de entrada para execu\u00e7\u00e3o do Celery. main.py : Inicializa\u00e7\u00e3o dos workers e beat (agendador). init .py : Configura\u00e7\u00e3o principal do Celery e logging. addons/ : Utilit\u00e1rios para Celery (logger, mail, scheduler, storage). exceptions/ : Exce\u00e7\u00f5es espec\u00edficas do contexto Celery. resources/ : Recursos e utilit\u00e1rios de configura\u00e7\u00e3o. tasks/ : Tarefas Celery (bot, email, arquivos). types/ : Tipos e contratos utilizados nas tasks.","title":"Estrutura dos Itens"},{"location":"celery_app/#subpastas","text":"addons/logger/ : Configura\u00e7\u00e3o e handlers de logging para Celery. addons/mail.py : Utilit\u00e1rio para envio de e-mails. addons/scheduler/ : Agendamento de tarefas. addons/storage/ : Integra\u00e7\u00e3o com armazenamento externo (ex: Google Cloud). Consulte os arquivos de cada subpasta para detalhes de implementa\u00e7\u00e3o.","title":"Subpastas"},{"location":"crawjud/","text":"CrawJUD (Rob\u00f4s) N\u00facleo dos rob\u00f4s de automa\u00e7\u00e3o, contendo bots para diferentes sistemas judiciais, utilit\u00e1rios, tratamento de exce\u00e7\u00f5es e tipos auxiliares. Estrutura dos Itens main .py : Ponto de entrada para execu\u00e7\u00e3o dos rob\u00f4s. init .py : Inicializa\u00e7\u00e3o do m\u00f3dulo. ENVIRONMENT-VARIABLES.md : Vari\u00e1veis de ambiente necess\u00e1rias para execu\u00e7\u00e3o dos rob\u00f4s. addons/ : Utilit\u00e1rios para autentica\u00e7\u00e3o, manipula\u00e7\u00e3o de elementos, logs, templates, busca, webdriver, etc. bots/ : Implementa\u00e7\u00f5es dos rob\u00f4s para cada sistema (caixa, calculadoras, elaw, esaj, pje, projudi). core/ : N\u00facleo de fun\u00e7\u00f5es e classes base dos rob\u00f4s. exceptions/ : Exce\u00e7\u00f5es espec\u00edficas dos rob\u00f4s. types/ : Tipos e contratos utilizados pelos rob\u00f4s. Subpastas addons/auth/ : Autentica\u00e7\u00e3o dos rob\u00f4s. addons/elements/ : Manipula\u00e7\u00e3o de elementos de interface. addons/interator/ : Utilit\u00e1rios de itera\u00e7\u00e3o. addons/logger/ : Logging dos rob\u00f4s. addons/printlogs/ : Envio de logs para o servidor SocketIO. addons/search/ : Utilit\u00e1rios de busca. addons/webdriver/ : Integra\u00e7\u00e3o com drivers de navegador. bots/ : Cada subpasta implementa um rob\u00f4 para um sistema judicial espec\u00edfico. core/data_formatters/ : Fun\u00e7\u00f5es de formata\u00e7\u00e3o de dados. Inicializar Rob\u00f4 poetry run python -m crawjud --json \"path/to/config.json\"","title":"CrawJUD (Rob\u00f4s)"},{"location":"crawjud/#crawjud-robos","text":"N\u00facleo dos rob\u00f4s de automa\u00e7\u00e3o, contendo bots para diferentes sistemas judiciais, utilit\u00e1rios, tratamento de exce\u00e7\u00f5es e tipos auxiliares.","title":"CrawJUD (Rob\u00f4s)"},{"location":"crawjud/#estrutura-dos-itens","text":"main .py : Ponto de entrada para execu\u00e7\u00e3o dos rob\u00f4s. init .py : Inicializa\u00e7\u00e3o do m\u00f3dulo. ENVIRONMENT-VARIABLES.md : Vari\u00e1veis de ambiente necess\u00e1rias para execu\u00e7\u00e3o dos rob\u00f4s. addons/ : Utilit\u00e1rios para autentica\u00e7\u00e3o, manipula\u00e7\u00e3o de elementos, logs, templates, busca, webdriver, etc. bots/ : Implementa\u00e7\u00f5es dos rob\u00f4s para cada sistema (caixa, calculadoras, elaw, esaj, pje, projudi). core/ : N\u00facleo de fun\u00e7\u00f5es e classes base dos rob\u00f4s. exceptions/ : Exce\u00e7\u00f5es espec\u00edficas dos rob\u00f4s. types/ : Tipos e contratos utilizados pelos rob\u00f4s.","title":"Estrutura dos Itens"},{"location":"crawjud/#subpastas","text":"addons/auth/ : Autentica\u00e7\u00e3o dos rob\u00f4s. addons/elements/ : Manipula\u00e7\u00e3o de elementos de interface. addons/interator/ : Utilit\u00e1rios de itera\u00e7\u00e3o. addons/logger/ : Logging dos rob\u00f4s. addons/printlogs/ : Envio de logs para o servidor SocketIO. addons/search/ : Utilit\u00e1rios de busca. addons/webdriver/ : Integra\u00e7\u00e3o com drivers de navegador. bots/ : Cada subpasta implementa um rob\u00f4 para um sistema judicial espec\u00edfico. core/data_formatters/ : Fun\u00e7\u00f5es de formata\u00e7\u00e3o de dados.","title":"Subpastas"},{"location":"crawjud/#inicializar-robo","text":"poetry run python -m crawjud --json \"path/to/config.json\"","title":"Inicializar Rob\u00f4"},{"location":"socketio_server/","text":"SocketIO Server Servidor de comunica\u00e7\u00e3o em tempo real baseado em Socket.IO, respons\u00e1vel por transmitir logs, notifica\u00e7\u00f5es e eventos entre os rob\u00f4s, API e clientes. Estrutura dos Itens main .py : Ponto de entrada do servidor SocketIO. init .py : Inicializa\u00e7\u00e3o do app Quart e configura\u00e7\u00e3o do SocketIO. middleware.py : Middlewares para tratamento de requisi\u00e7\u00f5es. addons/ : Utilit\u00e1rios auxiliares (ex: logger). constructor/ : Classes auxiliares para manipula\u00e7\u00e3o de arquivos e sess\u00f5es. domains/ : Servi\u00e7os de dom\u00ednio (ex: manipula\u00e7\u00e3o de arquivos, sess\u00f5es). namespaces/ : Namespaces do SocketIO (ex: bots, logs). types/ : Tipos e contratos utilizados pelo servidor. Subpastas addons/logger/ : Configura\u00e7\u00e3o e utilit\u00e1rios de logging para o servidor SocketIO. constructor/file.py : Manipula\u00e7\u00e3o de arquivos recebidos via SocketIO. domains/file_service.py : Servi\u00e7o para manipula\u00e7\u00e3o de arquivos e sess\u00f5es de usu\u00e1rio. namespaces/ : Namespaces para diferentes canais de comunica\u00e7\u00e3o. Consulte os arquivos de cada subpasta para detalhes de implementa\u00e7\u00e3o.","title":"SocketIO Server"},{"location":"socketio_server/#socketio-server","text":"Servidor de comunica\u00e7\u00e3o em tempo real baseado em Socket.IO, respons\u00e1vel por transmitir logs, notifica\u00e7\u00f5es e eventos entre os rob\u00f4s, API e clientes.","title":"SocketIO Server"},{"location":"socketio_server/#estrutura-dos-itens","text":"main .py : Ponto de entrada do servidor SocketIO. init .py : Inicializa\u00e7\u00e3o do app Quart e configura\u00e7\u00e3o do SocketIO. middleware.py : Middlewares para tratamento de requisi\u00e7\u00f5es. addons/ : Utilit\u00e1rios auxiliares (ex: logger). constructor/ : Classes auxiliares para manipula\u00e7\u00e3o de arquivos e sess\u00f5es. domains/ : Servi\u00e7os de dom\u00ednio (ex: manipula\u00e7\u00e3o de arquivos, sess\u00f5es). namespaces/ : Namespaces do SocketIO (ex: bots, logs). types/ : Tipos e contratos utilizados pelo servidor.","title":"Estrutura dos Itens"},{"location":"socketio_server/#subpastas","text":"addons/logger/ : Configura\u00e7\u00e3o e utilit\u00e1rios de logging para o servidor SocketIO. constructor/file.py : Manipula\u00e7\u00e3o de arquivos recebidos via SocketIO. domains/file_service.py : Servi\u00e7o para manipula\u00e7\u00e3o de arquivos e sess\u00f5es de usu\u00e1rio. namespaces/ : Namespaces para diferentes canais de comunica\u00e7\u00e3o. Consulte os arquivos de cada subpasta para detalhes de implementa\u00e7\u00e3o.","title":"Subpastas"}]}